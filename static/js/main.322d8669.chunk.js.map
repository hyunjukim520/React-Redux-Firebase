{"version":3,"sources":["components/scream/Scream.js","components/pages/home.js","App.js","utils/theme.js","serviceWorker.js","index.js"],"names":["Scream","dayjs","extend","relativeTime","_this$props","this","props","classes","_this$props$scream","scream","createdAt","userHandle","userImage","likeCount","commentCount","react_default","a","createElement","Card_default","className","card","CardMedia_default","image","title","CardContent_default","content","Typography_default","variant","color","fromNow","Chat_default","Component","withStyles","position","display","marginBottom","minWidth","padding","objectFit","Home","state","screams","_this2","axios","get","then","res","setState","data","catch","err","console","log","screamsMarkup","map","scream_Scream","key","screamId","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVariants","form","textAlign","margin","pageTitle","textField","button","customError","fontSize","marginTop","progress","invisibleSeparator","border","visibleSeparator","width","borderBottom","paper","profile","& .image-wrapper","& button","top","left","& .profile-image","height","maxWidth","borderRadius","& .profile-details","& span, svg","verticalAlign","& a","& hr","& svg.button","&:hover","cursor","buttons","defaults","baseURL","App","MuiThemeProvider_default","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.322d8669.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\n// MUI stuff\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// MUI Icons\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\n\r\nconst styles = {\r\n  card: {\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    marginBottom: 20\r\n  },\r\n  image: {\r\n    minWidth: 200\r\n  },\r\n  content: {\r\n    padding: 25,\r\n    objectFit: \"cover\"\r\n  }\r\n};\r\n\r\nclass Scream extends Component {\r\n  render() {\r\n    dayjs.extend(relativeTime);\r\n\r\n    const {\r\n      classes,\r\n      scream: { createdAt, userHandle, userImage, likeCount, commentCount }\r\n    } = this.props;\r\n\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardMedia\r\n          image={userImage}\r\n          title=\"Profile image\"\r\n          className={classes.image}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Typography variant=\"h5\" color=\"primary\">\r\n            {userHandle}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {dayjs(createdAt).fromNow()}\r\n          </Typography>\r\n          <span>{likeCount} Likes</span>\r\n          <ChatIcon color=\"primary\" />\r\n          <span>{commentCount} Comments</span>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nScream.propTypes = {\r\n  scream: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Scream);\r\n","import React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport Scream from \"../scream/Scream\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    screams: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"/screams\")\r\n      .then(res => {\r\n        this.setState({\r\n          screams: res.data\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          screams: null\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const { screams } = this.state;\r\n    let screamsMarkup = screams ? (\r\n      screams.map(scream => <Scream key={scream.screamId} scream={scream} />)\r\n    ) : (\r\n      <p>There are no screams.</p>\r\n    );\r\n\r\n    return <div>{screamsMarkup}</div>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport themeFile from \"./utils/theme\";\nimport Home from \"./components/pages/home\";\nimport axios from \"axios\";\n\nconst theme = createMuiTheme(themeFile);\n\naxios.defaults.baseURL =\n  \"https://us-central1-twitterape-da2b6.cloudfunctions.net/api\";\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Home />\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","export default {\r\n  palette: {\r\n    primary: {\r\n      light: \"#33c9dc\",\r\n      main: \"#00bcd4\",\r\n      dark: \"#008394\",\r\n      contrastText: \"#fff\"\r\n    },\r\n    secondary: {\r\n      light: \"#ff6333\",\r\n      main: \"#ff3d00\",\r\n      dark: \"#b22a00\",\r\n      contrastText: \"#fff\"\r\n    }\r\n  },\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  form: {\r\n    textAlign: \"center\"\r\n  },\r\n  image: {\r\n    margin: \"20px auto 20px auto\"\r\n  },\r\n  pageTitle: {\r\n    margin: \"10px auto 10px auto\"\r\n  },\r\n  textField: {\r\n    margin: \"10px auto 10px auto\"\r\n  },\r\n  button: {\r\n    margin: 20,\r\n    position: \"relative\"\r\n  },\r\n  customError: {\r\n    color: \"red\",\r\n    fontSize: \"0.8rem\",\r\n    marginTop: 10\r\n  },\r\n  progress: {\r\n    position: \"absolute\"\r\n  },\r\n  invisibleSeparator: {\r\n    border: \"none\",\r\n    margin: 4\r\n  },\r\n  visibleSeparator: {\r\n    width: \"100%\",\r\n    borderBottom: \"1px solid rgba(0,0,0,0.1)\",\r\n    marginBottom: 20\r\n  },\r\n  paper: {\r\n    padding: 20\r\n  },\r\n  profile: {\r\n    \"& .image-wrapper\": {\r\n      textAlign: \"center\",\r\n      position: \"relative\",\r\n      \"& button\": {\r\n        position: \"absolute\",\r\n        top: \"80%\",\r\n        left: \"70%\"\r\n      }\r\n    },\r\n    \"& .profile-image\": {\r\n      width: 200,\r\n      height: 200,\r\n      objectFit: \"cover\",\r\n      maxWidth: \"100%\",\r\n      borderRadius: \"50%\"\r\n    },\r\n    \"& .profile-details\": {\r\n      textAlign: \"center\",\r\n      \"& span, svg\": {\r\n        verticalAlign: \"middle\"\r\n      },\r\n      \"& a\": {\r\n        color: \"#00bcd4\"\r\n      }\r\n    },\r\n    \"& hr\": {\r\n      border: \"none\",\r\n      margin: \"0 0 10px 0\"\r\n    },\r\n    \"& svg.button\": {\r\n      \"&:hover\": {\r\n        cursor: \"pointer\"\r\n      }\r\n    }\r\n  },\r\n  buttons: {\r\n    textAlign: \"center\",\r\n    \"& a\": {\r\n      margin: \"20px 10px\"\r\n    }\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}